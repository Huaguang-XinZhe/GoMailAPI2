// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v6.31.1
// source: proto/server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 服务提供商类型
type ServiceProvider int32

const (
	ServiceProvider_MICROSOFT ServiceProvider = 0
	ServiceProvider_GOOGLE    ServiceProvider = 1
)

// Enum value maps for ServiceProvider.
var (
	ServiceProvider_name = map[int32]string{
		0: "MICROSOFT",
		1: "GOOGLE",
	}
	ServiceProvider_value = map[string]int32{
		"MICROSOFT": 0,
		"GOOGLE":    1,
	}
)

func (x ServiceProvider) Enum() *ServiceProvider {
	p := new(ServiceProvider)
	*p = x
	return p
}

func (x ServiceProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_proto_enumTypes[0].Descriptor()
}

func (ServiceProvider) Type() protoreflect.EnumType {
	return &file_proto_server_proto_enumTypes[0]
}

func (x ServiceProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceProvider.Descriptor instead.
func (ServiceProvider) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{0}
}

// 协议类型
type ProtocolType int32

const (
	ProtocolType_IMAP  ProtocolType = 0
	ProtocolType_GRAPH ProtocolType = 1
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0: "IMAP",
		1: "GRAPH",
	}
	ProtocolType_value = map[string]int32{
		"IMAP":  0,
		"GRAPH": 1,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_proto_enumTypes[1].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_proto_server_proto_enumTypes[1]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{1}
}

// 邮件信息（对应 types.MailInfo）
type MailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string          `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	ClientId        string          `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RefreshToken    string          `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ProtoType       ProtocolType    `protobuf:"varint,4,opt,name=proto_type,json=protoType,proto3,enum=ProtocolType" json:"proto_type,omitempty"`
	ServiceProvider ServiceProvider `protobuf:"varint,5,opt,name=service_provider,json=serviceProvider,proto3,enum=ServiceProvider" json:"service_provider,omitempty"`
}

func (x *MailInfo) Reset() {
	*x = MailInfo{}
	mi := &file_proto_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailInfo) ProtoMessage() {}

func (x *MailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailInfo.ProtoReflect.Descriptor instead.
func (*MailInfo) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{0}
}

func (x *MailInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MailInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MailInfo) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *MailInfo) GetProtoType() ProtocolType {
	if x != nil {
		return x.ProtoType
	}
	return ProtocolType_IMAP
}

func (x *MailInfo) GetServiceProvider() ServiceProvider {
	if x != nil {
		return x.ServiceProvider
	}
	return ServiceProvider_MICROSOFT
}

// 邮件地址（对应 domain.EmailAddress）
type EmailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EmailAddress) Reset() {
	*x = EmailAddress{}
	mi := &file_proto_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAddress) ProtoMessage() {}

func (x *EmailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAddress.ProtoReflect.Descriptor instead.
func (*EmailAddress) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{1}
}

func (x *EmailAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmailAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 邮件实体（对应 domain.Email）
type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string        `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	From    *EmailAddress `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To      *EmailAddress `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Date    string        `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Text    string        `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Html    string        `protobuf:"bytes,6,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	mi := &file_proto_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{2}
}

func (x *Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Email) GetFrom() *EmailAddress {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Email) GetTo() *EmailAddress {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Email) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Email) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Email) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

// 获取最新邮件请求（对应 dto.GetNewMailRequest）
type GetNewMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo      *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"`
	RefreshNeeded bool      `protobuf:"varint,2,opt,name=refresh_needed,json=refreshNeeded,proto3" json:"refresh_needed,omitempty"`
}

func (x *GetNewMailRequest) Reset() {
	*x = GetNewMailRequest{}
	mi := &file_proto_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMailRequest) ProtoMessage() {}

func (x *GetNewMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMailRequest.ProtoReflect.Descriptor instead.
func (*GetNewMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewMailRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

func (x *GetNewMailRequest) GetRefreshNeeded() bool {
	if x != nil {
		return x.RefreshNeeded
	}
	return false
}

// 获取最新邮件响应
type GetNewMailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        *Email  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	RefreshToken *string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"` // 当 refresh_needed=true 时返回
}

func (x *GetNewMailResponse) Reset() {
	*x = GetNewMailResponse{}
	mi := &file_proto_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewMailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMailResponse) ProtoMessage() {}

func (x *GetNewMailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMailResponse.ProtoReflect.Descriptor instead.
func (*GetNewMailResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{4}
}

func (x *GetNewMailResponse) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *GetNewMailResponse) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

// 查找邮件请求（对应 dto.FindMailRequest）
type FindMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"`
	EmailId  string    `protobuf:"bytes,2,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty"` // 从 URL 路径参数获取
}

func (x *FindMailRequest) Reset() {
	*x = FindMailRequest{}
	mi := &file_proto_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMailRequest) ProtoMessage() {}

func (x *FindMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMailRequest.ProtoReflect.Descriptor instead.
func (*FindMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{5}
}

func (x *FindMailRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

func (x *FindMailRequest) GetEmailId() string {
	if x != nil {
		return x.EmailId
	}
	return ""
}

// 查找邮件响应
type FindMailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email *Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *FindMailResponse) Reset() {
	*x = FindMailResponse{}
	mi := &file_proto_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindMailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMailResponse) ProtoMessage() {}

func (x *FindMailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMailResponse.ProtoReflect.Descriptor instead.
func (*FindMailResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{6}
}

func (x *FindMailResponse) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

// 获取垃圾邮件请求（对应 dto.GetNewJunkMailRequest）
type GetNewJunkMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"`
}

func (x *GetNewJunkMailRequest) Reset() {
	*x = GetNewJunkMailRequest{}
	mi := &file_proto_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewJunkMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewJunkMailRequest) ProtoMessage() {}

func (x *GetNewJunkMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewJunkMailRequest.ProtoReflect.Descriptor instead.
func (*GetNewJunkMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{7}
}

func (x *GetNewJunkMailRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

// 获取垃圾邮件响应
type GetNewJunkMailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email *Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetNewJunkMailResponse) Reset() {
	*x = GetNewJunkMailResponse{}
	mi := &file_proto_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewJunkMailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewJunkMailResponse) ProtoMessage() {}

func (x *GetNewJunkMailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewJunkMailResponse.ProtoReflect.Descriptor instead.
func (*GetNewJunkMailResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{8}
}

func (x *GetNewJunkMailResponse) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

// 邮件订阅请求（对应 dto.SubscribeMailRequest）
type SubscribeMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo      *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"`
	RefreshNeeded bool      `protobuf:"varint,2,opt,name=refresh_needed,json=refreshNeeded,proto3" json:"refresh_needed,omitempty"`
}

func (x *SubscribeMailRequest) Reset() {
	*x = SubscribeMailRequest{}
	mi := &file_proto_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMailRequest) ProtoMessage() {}

func (x *SubscribeMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMailRequest.ProtoReflect.Descriptor instead.
func (*SubscribeMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeMailRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

func (x *SubscribeMailRequest) GetRefreshNeeded() bool {
	if x != nil {
		return x.RefreshNeeded
	}
	return false
}

// 邮件事件（SSE 流事件）- 简化版本
type MailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType    string  `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                // "connected", "email", "heartbeat", "error", "closed"
	Email        *Email  `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email,omitempty"`                                   // 仅当 event_type="email" 时使用
	Message      *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`                               // 用于 connected/heartbeat/error/closed 消息
	RefreshToken *string `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"` // 仅当连接成功且需要刷新时返回
}

func (x *MailEvent) Reset() {
	*x = MailEvent{}
	mi := &file_proto_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailEvent) ProtoMessage() {}

func (x *MailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailEvent.ProtoReflect.Descriptor instead.
func (*MailEvent) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{10}
}

func (x *MailEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *MailEvent) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *MailEvent) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *MailEvent) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

// 刷新 Token 请求（对应 dto.RefreshTokenRequest）
type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	mi := &file_proto_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{11}
}

func (x *RefreshTokenRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

// 刷新 Token 响应
type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewRefreshToken string `protobuf:"bytes,1,opt,name=new_refresh_token,json=newRefreshToken,proto3" json:"new_refresh_token,omitempty"`
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	mi := &file_proto_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{12}
}

func (x *RefreshTokenResponse) GetNewRefreshToken() string {
	if x != nil {
		return x.NewRefreshToken
	}
	return ""
}

// 批量刷新 Token 请求（对应 dto.BatchRefreshTokenRequest）
type BatchRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfos []*MailInfo `protobuf:"bytes,1,rep,name=mail_infos,json=mailInfos,proto3" json:"mail_infos,omitempty"`
}

func (x *BatchRefreshTokenRequest) Reset() {
	*x = BatchRefreshTokenRequest{}
	mi := &file_proto_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRefreshTokenRequest) ProtoMessage() {}

func (x *BatchRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*BatchRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{13}
}

func (x *BatchRefreshTokenRequest) GetMailInfos() []*MailInfo {
	if x != nil {
		return x.MailInfos
	}
	return nil
}

// 批量刷新结果项（对应 dto.BatchRefreshResult）
type BatchRefreshResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	NewRefreshToken string  `protobuf:"bytes,2,opt,name=new_refresh_token,json=newRefreshToken,proto3" json:"new_refresh_token,omitempty"`
	Error           *string `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"` // 只有失败时才设置
}

func (x *BatchRefreshResult) Reset() {
	*x = BatchRefreshResult{}
	mi := &file_proto_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRefreshResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRefreshResult) ProtoMessage() {}

func (x *BatchRefreshResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRefreshResult.ProtoReflect.Descriptor instead.
func (*BatchRefreshResult) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{14}
}

func (x *BatchRefreshResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BatchRefreshResult) GetNewRefreshToken() string {
	if x != nil {
		return x.NewRefreshToken
	}
	return ""
}

func (x *BatchRefreshResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// 批量刷新 Token 响应（对应 dto.BatchRefreshTokenData）
type BatchRefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int32                 `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailCount    int32                 `protobuf:"varint,2,opt,name=fail_count,json=failCount,proto3" json:"fail_count,omitempty"`
	Results      []*BatchRefreshResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchRefreshTokenResponse) Reset() {
	*x = BatchRefreshTokenResponse{}
	mi := &file_proto_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRefreshTokenResponse) ProtoMessage() {}

func (x *BatchRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*BatchRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{15}
}

func (x *BatchRefreshTokenResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchRefreshTokenResponse) GetFailCount() int32 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *BatchRefreshTokenResponse) GetResults() []*BatchRefreshResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 协议检测请求（对应 dto.DetectProtocolTypeRequest）
type DetectProtocolTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfo *MailInfo `protobuf:"bytes,1,opt,name=mail_info,json=mailInfo,proto3" json:"mail_info,omitempty"` // 邮箱信息（不包含 protoType）
}

func (x *DetectProtocolTypeRequest) Reset() {
	*x = DetectProtocolTypeRequest{}
	mi := &file_proto_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectProtocolTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectProtocolTypeRequest) ProtoMessage() {}

func (x *DetectProtocolTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectProtocolTypeRequest.ProtoReflect.Descriptor instead.
func (*DetectProtocolTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{16}
}

func (x *DetectProtocolTypeRequest) GetMailInfo() *MailInfo {
	if x != nil {
		return x.MailInfo
	}
	return nil
}

// 协议检测响应（对应 dto.DetectProtocolTypeResponse）
type DetectProtocolTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoType ProtocolType `protobuf:"varint,1,opt,name=proto_type,json=protoType,proto3,enum=ProtocolType" json:"proto_type,omitempty"` // 检测到的协议类型
}

func (x *DetectProtocolTypeResponse) Reset() {
	*x = DetectProtocolTypeResponse{}
	mi := &file_proto_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectProtocolTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectProtocolTypeResponse) ProtoMessage() {}

func (x *DetectProtocolTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectProtocolTypeResponse.ProtoReflect.Descriptor instead.
func (*DetectProtocolTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{17}
}

func (x *DetectProtocolTypeResponse) GetProtoType() ProtocolType {
	if x != nil {
		return x.ProtoType
	}
	return ProtocolType_IMAP
}

// 批量检测协议类型请求（对应 dto.BatchDetectProtocolTypeRequest）
type BatchDetectProtocolTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailInfos []*MailInfo `protobuf:"bytes,1,rep,name=mail_infos,json=mailInfos,proto3" json:"mail_infos,omitempty"` // 需要检测的邮箱信息列表
}

func (x *BatchDetectProtocolTypeRequest) Reset() {
	*x = BatchDetectProtocolTypeRequest{}
	mi := &file_proto_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDetectProtocolTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDetectProtocolTypeRequest) ProtoMessage() {}

func (x *BatchDetectProtocolTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDetectProtocolTypeRequest.ProtoReflect.Descriptor instead.
func (*BatchDetectProtocolTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{18}
}

func (x *BatchDetectProtocolTypeRequest) GetMailInfos() []*MailInfo {
	if x != nil {
		return x.MailInfos
	}
	return nil
}

// 批量检测协议类型结果项（对应 dto.BatchDetectProtocolTypeResult）
type BatchDetectProtocolTypeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string       `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                                             // 邮箱地址
	ProtoType ProtocolType `protobuf:"varint,2,opt,name=proto_type,json=protoType,proto3,enum=ProtocolType" json:"proto_type,omitempty"` // 检测到的协议类型（成功时）
	Error     *string      `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`                                       // 错误信息（失败时）
}

func (x *BatchDetectProtocolTypeResult) Reset() {
	*x = BatchDetectProtocolTypeResult{}
	mi := &file_proto_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDetectProtocolTypeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDetectProtocolTypeResult) ProtoMessage() {}

func (x *BatchDetectProtocolTypeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDetectProtocolTypeResult.ProtoReflect.Descriptor instead.
func (*BatchDetectProtocolTypeResult) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{19}
}

func (x *BatchDetectProtocolTypeResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BatchDetectProtocolTypeResult) GetProtoType() ProtocolType {
	if x != nil {
		return x.ProtoType
	}
	return ProtocolType_IMAP
}

func (x *BatchDetectProtocolTypeResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// 批量检测协议类型响应（对应 dto.BatchDetectProtocolTypeResponse）
type BatchDetectProtocolTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int32                            `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"` // 成功检测的数量
	FailCount    int32                            `protobuf:"varint,2,opt,name=fail_count,json=failCount,proto3" json:"fail_count,omitempty"`          // 失败检测的数量
	Results      []*BatchDetectProtocolTypeResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`                                // 详细结果列表
}

func (x *BatchDetectProtocolTypeResponse) Reset() {
	*x = BatchDetectProtocolTypeResponse{}
	mi := &file_proto_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDetectProtocolTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDetectProtocolTypeResponse) ProtoMessage() {}

func (x *BatchDetectProtocolTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDetectProtocolTypeResponse.ProtoReflect.Descriptor instead.
func (*BatchDetectProtocolTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{20}
}

func (x *BatchDetectProtocolTypeResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchDetectProtocolTypeResponse) GetFailCount() int32 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *BatchDetectProtocolTypeResponse) GetResults() []*BatchDetectProtocolTypeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_proto_server_proto protoreflect.FileDescriptor

var file_proto_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x74, 0x6d, 0x6c, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4a, 0x75, 0x6e, 0x6b, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4a, 0x75, 0x6e, 0x6b, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x65, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x22, 0xbe, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x7b, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a,
	0x1a, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2a, 0x2c, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f,
	0x46, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x2a, 0x23, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x4d, 0x41, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x10, 0x01, 0x32, 0xa4, 0x04, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4a, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x4a, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x15, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15, 0x5a, 0x13,
	0x67, 0x6f, 0x6d, 0x61, 0x69, 0x6c, 0x61, 0x70, 0x69, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_server_proto_rawDescOnce sync.Once
	file_proto_server_proto_rawDescData = file_proto_server_proto_rawDesc
)

func file_proto_server_proto_rawDescGZIP() []byte {
	file_proto_server_proto_rawDescOnce.Do(func() {
		file_proto_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_server_proto_rawDescData)
	})
	return file_proto_server_proto_rawDescData
}

var file_proto_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_server_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_server_proto_goTypes = []any{
	(ServiceProvider)(0),                    // 0: ServiceProvider
	(ProtocolType)(0),                       // 1: ProtocolType
	(*MailInfo)(nil),                        // 2: MailInfo
	(*EmailAddress)(nil),                    // 3: EmailAddress
	(*Email)(nil),                           // 4: Email
	(*GetNewMailRequest)(nil),               // 5: GetNewMailRequest
	(*GetNewMailResponse)(nil),              // 6: GetNewMailResponse
	(*FindMailRequest)(nil),                 // 7: FindMailRequest
	(*FindMailResponse)(nil),                // 8: FindMailResponse
	(*GetNewJunkMailRequest)(nil),           // 9: GetNewJunkMailRequest
	(*GetNewJunkMailResponse)(nil),          // 10: GetNewJunkMailResponse
	(*SubscribeMailRequest)(nil),            // 11: SubscribeMailRequest
	(*MailEvent)(nil),                       // 12: MailEvent
	(*RefreshTokenRequest)(nil),             // 13: RefreshTokenRequest
	(*RefreshTokenResponse)(nil),            // 14: RefreshTokenResponse
	(*BatchRefreshTokenRequest)(nil),        // 15: BatchRefreshTokenRequest
	(*BatchRefreshResult)(nil),              // 16: BatchRefreshResult
	(*BatchRefreshTokenResponse)(nil),       // 17: BatchRefreshTokenResponse
	(*DetectProtocolTypeRequest)(nil),       // 18: DetectProtocolTypeRequest
	(*DetectProtocolTypeResponse)(nil),      // 19: DetectProtocolTypeResponse
	(*BatchDetectProtocolTypeRequest)(nil),  // 20: BatchDetectProtocolTypeRequest
	(*BatchDetectProtocolTypeResult)(nil),   // 21: BatchDetectProtocolTypeResult
	(*BatchDetectProtocolTypeResponse)(nil), // 22: BatchDetectProtocolTypeResponse
}
var file_proto_server_proto_depIdxs = []int32{
	1,  // 0: MailInfo.proto_type:type_name -> ProtocolType
	0,  // 1: MailInfo.service_provider:type_name -> ServiceProvider
	3,  // 2: Email.from:type_name -> EmailAddress
	3,  // 3: Email.to:type_name -> EmailAddress
	2,  // 4: GetNewMailRequest.mail_info:type_name -> MailInfo
	4,  // 5: GetNewMailResponse.email:type_name -> Email
	2,  // 6: FindMailRequest.mail_info:type_name -> MailInfo
	4,  // 7: FindMailResponse.email:type_name -> Email
	2,  // 8: GetNewJunkMailRequest.mail_info:type_name -> MailInfo
	4,  // 9: GetNewJunkMailResponse.email:type_name -> Email
	2,  // 10: SubscribeMailRequest.mail_info:type_name -> MailInfo
	4,  // 11: MailEvent.email:type_name -> Email
	2,  // 12: RefreshTokenRequest.mail_info:type_name -> MailInfo
	2,  // 13: BatchRefreshTokenRequest.mail_infos:type_name -> MailInfo
	16, // 14: BatchRefreshTokenResponse.results:type_name -> BatchRefreshResult
	2,  // 15: DetectProtocolTypeRequest.mail_info:type_name -> MailInfo
	1,  // 16: DetectProtocolTypeResponse.proto_type:type_name -> ProtocolType
	2,  // 17: BatchDetectProtocolTypeRequest.mail_infos:type_name -> MailInfo
	1,  // 18: BatchDetectProtocolTypeResult.proto_type:type_name -> ProtocolType
	21, // 19: BatchDetectProtocolTypeResponse.results:type_name -> BatchDetectProtocolTypeResult
	5,  // 20: MailService.GetLatestMail:input_type -> GetNewMailRequest
	7,  // 21: MailService.FindMail:input_type -> FindMailRequest
	9,  // 22: MailService.GetJunkMail:input_type -> GetNewJunkMailRequest
	11, // 23: MailService.SubscribeMail:input_type -> SubscribeMailRequest
	13, // 24: MailService.RefreshToken:input_type -> RefreshTokenRequest
	15, // 25: MailService.BatchRefreshToken:input_type -> BatchRefreshTokenRequest
	18, // 26: MailService.DetectProtocolType:input_type -> DetectProtocolTypeRequest
	20, // 27: MailService.BatchDetectProtocolType:input_type -> BatchDetectProtocolTypeRequest
	6,  // 28: MailService.GetLatestMail:output_type -> GetNewMailResponse
	8,  // 29: MailService.FindMail:output_type -> FindMailResponse
	10, // 30: MailService.GetJunkMail:output_type -> GetNewJunkMailResponse
	12, // 31: MailService.SubscribeMail:output_type -> MailEvent
	14, // 32: MailService.RefreshToken:output_type -> RefreshTokenResponse
	17, // 33: MailService.BatchRefreshToken:output_type -> BatchRefreshTokenResponse
	19, // 34: MailService.DetectProtocolType:output_type -> DetectProtocolTypeResponse
	22, // 35: MailService.BatchDetectProtocolType:output_type -> BatchDetectProtocolTypeResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_server_proto_init() }
func file_proto_server_proto_init() {
	if File_proto_server_proto != nil {
		return
	}
	file_proto_server_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_server_proto_msgTypes[10].OneofWrappers = []any{}
	file_proto_server_proto_msgTypes[14].OneofWrappers = []any{}
	file_proto_server_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_server_proto_goTypes,
		DependencyIndexes: file_proto_server_proto_depIdxs,
		EnumInfos:         file_proto_server_proto_enumTypes,
		MessageInfos:      file_proto_server_proto_msgTypes,
	}.Build()
	File_proto_server_proto = out.File
	file_proto_server_proto_rawDesc = nil
	file_proto_server_proto_goTypes = nil
	file_proto_server_proto_depIdxs = nil
}
